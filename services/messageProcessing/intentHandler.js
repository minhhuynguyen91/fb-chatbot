const { searchProduct } = require('./productSearcher');
const { mergeOrderInfo, saveOrderInfo, handleOrderInfo, getHistory } = require('./orderManager');
const { getGptProactivePrompt } = require('./proactivePrompt');
const { OpenAI } = require('openai');
const getUserProfile = require('../getUserProfile');
const { getPartialOrder, setPartialOrder, clearPartialOrder } = require('../partialOrderStore');

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function handleIntent(analysis, message, senderId, PRODUCT_DATABASE, SYSTEM_PROMPT) {
  const { intent, entities } = analysis;
  const { product, category } = entities || {};
  const userProfile = await getUserProfile(senderId);
  const prevOrder = getPartialOrder(senderId);
  let response;

  switch (intent) {
    case 'image': {
      const images = await searchProduct(PRODUCT_DATABASE, product, category, senderId);
      response = images.length > 0
        ? { type: 'image', image_url: images.map(image => image.image_url).join('\n') }
        : { type: 'text', content: 'Kh√¥ng t√¨m th·∫•y ·∫£nh, vui l√≤ng ch·ªçn s·∫£n ph·∫©m kh√°c ·∫°' };
      break;
    }
    case 'product_details': {
      const targetProduct = (await searchProduct(PRODUCT_DATABASE, product, category, senderId))?.[0];
      if (targetProduct) {
        const systemPrompt = `
          ${SYSTEM_PROMPT}
          T√™n s·∫£n ph·∫©m: ${targetProduct.product}
          Danh m·ª•c: ${targetProduct.category}
          Chi ti·∫øt: ${(targetProduct.product_details || '').trim() || 'Ch∆∞a c√≥ th√¥ng tin chi ti·∫øt.'}
          Gi√°: ${(targetProduct.price || '').trim() || 'Ch∆∞a c√≥ gi√°.'}
          N·∫øu kh√°ch h·ªèi v·ªÅ th√¥ng tin kh√¥ng c√≥ trong chi ti·∫øt s·∫£n ph·∫©m, h√£y tr·∫£ l·ªùi l·ªãch s·ª± r·∫±ng hi·ªán t·∫°i b√™n em ch∆∞a c√≥ th√¥ng tin ƒë√≥ v√† s·∫Ω ki·ªÉm tra l·∫°i ho·∫∑c kh√°ch c√≥ th·ªÉ li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt. Lu√¥n tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán, b·∫±ng ti·∫øng Vi·ªát.
        `.trim();

        const messages = [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ];

        const chatResponse = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages,
          max_tokens: 200
        });

        response = { type: 'text', content: chatResponse.choices[0].message.content.trim() };
      } else {
        response = { type: 'text', content: 'Hi·ªán t·∫°i b√™n em ko t√¨m th·∫•y th√¥ng tin c·ªßa s·∫£n ph·∫©m n√†y' };
      }
      break;
    }
    case 'price': {
      const targetProduct = (await searchProduct(PRODUCT_DATABASE, product, category, senderId))?.[0];
      if (targetProduct) {
        const systemPrompt = `
          ${SYSTEM_PROMPT}
          T√™n s·∫£n ph·∫©m: ${targetProduct.product}
          Danh m·ª•c: ${targetProduct.category}
          Gi√°: ${(targetProduct.price || '').trim() || 'Ch∆∞a c√≥ gi√°.'}
          Gi√° kh√°ch h√†ng ƒë·ªÅ xu·∫•t: ${entities.bargain_price || 'Kh√¥ng c√≥'}
          Chi ti·∫øt: ${(targetProduct.product_details || '').trim() || 'Ch∆∞a c√≥ th√¥ng tin chi ti·∫øt.'}
          N·∫øu kh√°ch h√†ng tr·∫£ gi√°, h√£y tr·∫£ l·ªùi l·ªãch s·ª± r·∫±ng gi√° ƒë√£ ƒë∆∞·ª£c ni√™m y·∫øt ho·∫∑c ƒëang c√≥ ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i t·ªët nh·∫•t hi·ªán t·∫°i. N·∫øu gi√° ƒë·ªÅ xu·∫•t h·ª£p l√Ω, c√≥ th·ªÉ g·ª£i √Ω ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i (n·∫øu c√≥). Lu√¥n khuy·∫øn kh√≠ch kh√°ch h√†ng ƒë·∫∑t h√†ng v√† cung c·∫•p th√¥ng tin nh∆∞ size, ƒë·ªãa ch·ªâ. Gi·ªØ gi·ªçng ƒëi·ªáu th√¢n thi·ªán, t·ª± nhi√™n, b·∫±ng ti·∫øng Vi·ªát.
        `.trim();

        const messages = [
          { role: 'system', content: systemPrompt },
          { role: 'user', content: message }
        ];

        const chatResponse = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages,
          max_tokens: 100
        });

        response = { type: 'text', content: chatResponse.choices[0].message.content.trim() };
      } else {
        response = { type: 'text', content: 'Hi·ªán t·∫°i b√™n em ko t√¨m th·∫•y th√¥ng tin s·∫£n ph·∫©m n√†y, vui l√≤ng ch·ªçn s·∫£n ph·∫©m kh√°c ·∫°!' };
      }
      break;
    }
    case 'order_info': {
      response = await handleOrderInfo(senderId, entities, prevOrder, userProfile);
      break;
    }
    case 'size': {
      const customerWeight = entities.weight || '';
      const customerHeight = entities.height || '';
      const targetProduct = (await searchProduct(PRODUCT_DATABASE, product, category, senderId))?.[0];
      if (targetProduct && (customerWeight || customerHeight)) {
        const sizePrompt = `
          S·∫£n ph·∫©m: ${targetProduct.product}
          Danh m·ª•c: ${targetProduct.category}
          Th√¥ng tin kh√°ch h√†ng: ${customerWeight ? `C√¢n n·∫∑ng: ${customerWeight}` : ''} ${customerHeight ? `Chi·ªÅu cao: ${customerHeight}` : ''}
          B·∫£ng size s·∫£n ph·∫©m: ${(targetProduct.size || '').trim()}
          D·ª±a v√†o th√¥ng tin tr√™n, h√£y t∆∞ v·∫•n size ph√π h·ª£p cho kh√°ch h√†ng b·∫±ng ti·∫øng Vi·ªát, ng·∫Øn g·ªçn, th√¢n thi·ªán.
          Lu√¥n x∆∞ng b·∫£n th√¢n l√† em.
        `.trim();
        const messages = [
          { role: 'system', content: sizePrompt },
          ...(await getHistory(senderId)).slice(-10)
        ];
        const chatResponse = await openai.chat.completions.create({
          model: 'gpt-4o-mini',
          messages,
          max_tokens: 150
        });
        response = { type: 'text', content: chatResponse.choices[0].message.content.trim() };
      } else if (!customerWeight && !customerHeight) {
        response = { type: 'text', content: 'Vui l√≤ng cung c·∫•p c√¢n n·∫∑ng v√†/ho·∫∑c chi·ªÅu cao ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n size ph√π h·ª£p nh√©!' };
      } else {
        response = { type: 'text', content: 'Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ho·∫∑c b·∫£ng size, vui l√≤ng ch·ªçn s·∫£n ph·∫©m kh√°c ·∫°!' };
      }
      break;
    }
    case 'size_chart': {
      const targetProduct = (await searchProduct(PRODUCT_DATABASE, product, category, senderId))?.[0];
      response = targetProduct && targetProduct.size
        ? { type: 'text', content: `D·∫° ${userProfile.first_name} ${userProfile.last_name}, ƒë√¢y l√† b·∫£ng size cho s·∫£n ph·∫©m ${targetProduct.product}:\n${targetProduct.size.trim()}` }
        : { type: 'text', content: 'Hi·ªán t·∫°i b√™n em ch∆∞a c√≥ b·∫£ng size cho s·∫£n ph·∫©m n√†y.' };
      break;
    }
    case 'color': {
      const targetColor = entities.color || '';
      const targetProduct = entities.product || '';
      const userName = userProfile ? `${userProfile.first_name} ${userProfile.last_name}` : 'kh√°ch';
      
      if (targetProduct && !targetColor) {
        // Case: Asking for colors of a specific product (e.g., "ƒê·∫ßm Maxi c√≥ m√†u n√†o?")
        const product = await searchProduct(PRODUCT_DATABASE, targetProduct, category, senderId);
        if (product.length > 0) {
          const colors = product[0].color
            .split('\n')
            .map(c => c.trim())
            .filter(c => c)
            .map(c => c.replace(/^\d+\.\s*/, '')) // Remove numbering like "1. "
            .join(', ');
          response = {
            type: 'text',
            content: `D·∫° ${userName} ∆°i, ƒë·∫ßm ${targetProduct} hi·ªán c√≥ c√°c m√†u: ${colors}. M√¨nh mu·ªën ch·ªçn m√†u n√†o ·∫°? üíñ`
          };
        } else {
          response = {
            type: 'text',
            content: `Hi·ªán t·∫°i b√™n em ch∆∞a c√≥ th√¥ng tin v·ªÅ ƒë·∫ßm ${targetProduct}, vui l√≤ng li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt ·∫°!`
          };
        }
      } else {
        // Case: Asking for products of a specific color (e.g., "c√≤n ƒë·∫ßm n√†o m√†u ƒëen n·ªØa ko?")
        const products = await searchProduct(PRODUCT_DATABASE, targetProduct, category, senderId, targetColor);
        if (products.length > 0) {
          const productNames = products.map(p => p.product).join(', ');
          response = {
            type: 'text',
            content: `D·∫° ${userName} ∆°i, b√™n em c√≥ c√°c ƒë·∫ßm m√†u ${targetColor} sau ƒë√¢y n√®: ${productNames}. M√¨nh mu·ªën xem chi ti·∫øt m·∫´u n√†o ·∫°? üíñ`
          };
        } else {
          response = {
            type: 'text',
            content: `Hi·ªán t·∫°i b√™n em ch∆∞a c√≥ ƒë·∫ßm m√†u ${targetColor}, vui l√≤ng li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt ·∫°!`
          };
        }
      }
      break;
    }
    default: {
      const userName = userProfile ? `${userProfile.first_name} ${userProfile.last_name}` : 'kh√°ch';
      if (entities.product && message.toLowerCase().includes('m√†u n√†o')) {
        // Fallback for color queries misclassified as general
        const product = await searchProduct(PRODUCT_DATABASE, entities.product, category, senderId);
        if (product.length > 0) {
          const colors = product[0].color
            .split('\n')
            .map(c => c.trim())
            .filter(c => c)
            .map(c => c.replace(/^\d+\.\s*/, '')) // Remove numbering like "1. ")
            .join(', ');
          response = {
            type: 'text',
            content: `D·∫° ${userName} ∆°i, ƒë·∫ßm ${entities.product} hi·ªán c√≥ c√°c m√†u: ${colors}. M√¨nh mu·ªën ch·ªçn m√†u n√†o ·∫°? üíñ`
          };
        } else {
          response = {
            type: 'text',
            content: `Hi·ªán t·∫°i b√™n em ch∆∞a c√≥ th√¥ng tin v·ªÅ ƒë·∫ßm ${entities.product}, vui l√≤ng li√™n h·ªá ƒë·ªÉ bi·∫øt th√™m chi ti·∫øt ·∫°!`
          };
        }
      } else {
        // Handle vague purchase requests by suggesting dress products
        const vaguePurchaseKeywords = ['mua ƒë·ªì', 'mu·ªën mua', 'c√≥ b√°n g√¨', 'c√≥ g√¨ b√°n', 'mua qu·∫ßn √°o'];
        const isVaguePurchase = vaguePurchaseKeywords.some(keyword => message.toLowerCase().includes(keyword));
        if (isVaguePurchase) {
          const categories = [...new Set(PRODUCT_DATABASE.map(r => r.category))];
          const dressCategory = categories.includes('√Åo Qu·∫ßn') ? '√Åo Qu·∫ßn' : categories[0] || 's·∫£n ph·∫©m';
          const products = await searchProduct(PRODUCT_DATABASE, '', dressCategory, senderId);
          const productList = products.length > 0
            ? products.slice(0, 5).map(p => `- ${p.product} (${p.color ? `m√†u: ${p.color.split('\n').filter(c => c).join(', ')}` : 'nhi·ªÅu m√†u'})`).join('\n')
            : 'ƒê·∫ßm Maxi, ƒê·∫ßm Bodycon, ƒê·∫ßm Ch·ªØ A, ƒê·∫ßm Su√¥ng, ƒê·∫ßm Midi';
          response = {
            type: 'text',
            content: `D·∫° ${userName} ∆°i, b√™n em c√≥ r·∫•t nhi·ªÅu m·∫´u ƒë·∫ßm xinh x·∫Øn trong danh m·ª•c ${dressCategory} n√®:\n\n${productList}\n\nM√¨nh th√≠ch m·∫´u n√†o ho·∫∑c mu·ªën xem th√™m v·ªÅ gi√°, size, hay m√†u s·∫Øc th√¨ cho em bi·∫øt nha! üíñ`
          };
        } else {
          const prompt = `
            ${SYSTEM_PROMPT} 
            Danh m·ª•c s·∫£n ph·∫©m: ${[...new Set(PRODUCT_DATABASE.map(r => r.category))].join(', ')},
            Lu√¥n g·ªçi kh√°ch h√†ng b·∫±ng t√™n: ${userName}
          `;
          const messages = [
            { role: 'system', content: prompt },
            ...(await getHistory(senderId)).slice(-6)
          ];
          const chatResponse = await openai.chat.completions.create({
            model: 'gpt-4o-mini',
            messages,
            max_tokens: 150
          });
          response = { type: 'text', content: chatResponse.choices[0].message.content.trim() };
        }
      }
    }
  }

  if (intent !== 'order_info' && response.type === 'text') {
    const proactivePromptText = await getGptProactivePrompt(senderId, entities, prevOrder, userProfile, PRODUCT_DATABASE, SYSTEM_PROMPT, response);
    if (proactivePromptText) {
      response.content += `\n${proactivePromptText}`;
    }
  }

  return response;
}

module.exports = { handleIntent };